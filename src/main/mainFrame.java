/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import com.googlecode.javacv.FFmpegFrameGrabber;
import com.googlecode.javacv.FrameGrabber.Exception;
import static com.googlecode.javacv.cpp.opencv_core.*;
import static com.googlecode.javacv.cpp.opencv_imgproc.*;
import static com.googlecode.javacv.cpp.opencv_highgui.cvLoadImage;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author vabsoluter
 */
public class mainFrame extends javax.swing.JFrame {

    private IplImage image = null;
    private final JFileChooser fileChooser = new JFileChooser();

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
        imageScrollPane.setPreferredSize(new Dimension(640, 480));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageScrollPane = new javax.swing.JScrollPane();
        imageView = new javax.swing.JLabel();
        openImageButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imageScrollPane.setViewportView(imageView);

        openImageButton.setText("Open Image");
        openImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openImageButton)
                        .addGap(14, 14, 14)
                        .addComponent(imageScrollPane))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(imageScrollPane))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(openImageButton)
                        .addGap(0, 514, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageButtonActionPerformed
        image = openImage();
        if (image != null) {
            BufferedImage bi = image.getBufferedImage();
            imageView.setIcon(new ImageIcon(bi));
            //cvSetImageROI(image, new CvRect(1, 1, 200, W);
        }
    }//GEN-LAST:event_openImageButtonActionPerformed
    private IplImage openImage() {

        // Ask user for the location of the image file
        if (fileChooser.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
            return null;
        }

        // Load the image
        final String path = fileChooser.getSelectedFile().getAbsolutePath();
        final IplImage newImage = cvLoadImage(path);
        if (newImage != null) {
            return noise(newImage,65135);
        } else {
            showMessageDialog(this, "Cannot open image file: " + path, getTitle(), ERROR_MESSAGE);
            return null;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new mainFrame().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JLabel imageView;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton openImageButton;
    // End of variables declaration//GEN-END:variables


    /*
    * Метод зашумления изображения image .
    * @param image входящее изображение
    * @param numOfPoints количество точек зашумления
    * @return Зашумленное numOfPoints точками изображение
     */
    public static IplImage noise(IplImage image, int numOfPoints) {
        
        CvMat cvMat = image.asCvMat() ; // Преобразовние объекта
        
        // IplImage в cvMat
        for (int i = 0; i < numOfPoints ; i++) {
                int x = (int)getRandomOnInterval(0, cvMat.rows());
                int y = (int)getRandomOnInterval(0 ,cvMat.cols());
                cvMat.put(x, y, 2, getRandomOnInterval(0,255)); // обращение к R компоненте
                cvMat.put(x, y, 1, getRandomOnInterval(0,255)); // обращение к G компоненте
                cvMat.put(x, y, 0, getRandomOnInterval(0,255)); // обращение к B компоненте
        }

        return cvMat.asIplImage(); // Преобразовние объекта cvMat
        // в IplImage ,
        // возвращение результата
 }
 
 public static double getRandomOnInterval(long a, long b) {
 double u = Math.random();
 return u * (b - a) + a;
}
}